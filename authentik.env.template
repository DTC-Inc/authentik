#########################################
# Authentik Multi-Tenant Configuration Template
# Copy this to .env and customize for your environment
#########################################

#########################################
# General Configuration
#########################################
CONTAINER_NAME_PREFIX=homelab
TZ=America/New_York
PUID=1000
PGID=1000

#########################################
# Authentik Application Configuration
#########################################
AUTHENTIK_VERSION=2025.2
AUTHENTIK_SECRET_KEY=YOUR_SECRET_KEY_HERE
AUTHENTIK_ERROR_REPORTING=false
ENABLE_AUTHENTIK_PRIVILEGES=false

# Multi-Tenancy Configuration
AUTHENTIK_TENANTS_ENABLED=true

#########################################
# Domain Configuration
#########################################
DOMAIN_NAME=yourdomain.com
AUTHENTIK_PUBLIC_DOMAIN=auth.yourdomain.com
AUTHENTIK_PRIVATE_DOMAIN=auth.local.yourdomain.com
AUTHENTIK_CERT_RESOLVER=letsencrypt

#########################################
# Database Configuration
#########################################
AUTHENTIK_DB_USERNAME=authentik
AUTHENTIK_DB_PASSWORD=YOUR_DB_PASSWORD_HERE
AUTHENTIK_DB_DATABASE_NAME=authentik

#########################################
# Email Configuration (Optional)
#########################################
# Uncomment and configure these for email functionality
# AUTHENTIK_EMAIL_HOST=smtp.gmail.com
# AUTHENTIK_EMAIL_PORT=587
# AUTHENTIK_EMAIL_USERNAME=your-email@gmail.com
# AUTHENTIK_EMAIL_PASSWORD=your-app-password
# AUTHENTIK_EMAIL_USE_TLS=true
# AUTHENTIK_EMAIL_USE_SSL=false
# AUTHENTIK_EMAIL_TIMEOUT=10
# AUTHENTIK_EMAIL_FROM=authentik@yourdomain.com

#########################################
# Network Configuration
#########################################
AUTHENTIK_APP_NETWORK=authentik_app
AUTHENTIK_DB_NETWORK=authentik_db

#########################################
# Optional Services
#########################################
ENABLE_GEOIP_UPDATE=1
# GEOIP_ACCOUNT_ID=
# GEOIP_LICENSE_KEY=

ENABLE_AUTHENTIK_CLOUDFLARED=0
# AUTHENTIK_CLOUDFLARE_TUNNEL_TOKEN= 

# Microsoft Entra ID OAuth property mapping
email = info.get("email", "") or info.get("mail", "") or info.get("upn", "")
username = info.get("preferred_username", "") or email.split("@")[0] if "@" in email else info.get("oid", "")[:8]
domain = email.split("@")[1] if "@" in email else ""

# Handle name fields from Entra ID
full_name = info.get("name", "")
if not full_name:
    given = info.get("given_name", "") or info.get("givenName", "")
    family = info.get("family_name", "") or info.get("surname", "")
    full_name = f"{given} {family}".strip()

# Fallback to username if no name available
if not full_name:
    full_name = username

# Extract groups from Entra ID (if configured)
entra_groups = info.get("groups", []) or info.get("roles", [])

# Map Entra ID groups to Authentik groups
authentik_groups = []

# Domain-based group assignment (same as your Google setup)
if domain == "translucentus.com":
    authentik_groups.extend(["DTC_Staff", "ZeroTier_Admins"])
elif domain == "dtctoday.com":
    authentik_groups.extend(["DTC_Admins", "ZeroTier_Admins"])
elif domain.endswith(".client.dtc.com"):
    client_name = domain.split(".")[0].title()
    authentik_groups.extend([f"Client_{client_name}_Users", "ZeroTier_Users"])

# Map specific Entra ID groups to Authentik groups
entra_group_mapping = {
    # Map Entra ID group IDs or names to Authentik group names
    "a1b2c3d4-e5f6-7890-abcd-ef1234567890": "Azure_Admins",  # Example Entra ID group GUID
    "IT Department": "DTC_IT_Staff",
    "Sales Team": "DTC_Sales",
    "Support Team": "Support_Access",
    "ZeroTier Users": "ZeroTier_Users",
    "Network Admins": "ZeroTier_Admins"
}

# Add mapped groups from Entra ID
for entra_group in entra_groups:
    if entra_group in entra_group_mapping:
        authentik_groups.append(entra_group_mapping[entra_group])

# Default groups if none assigned
if not authentik_groups:
    authentik_groups = ["External_Users", "ZeroTier_Users"]

# Remove duplicates
authentik_groups = list(set(authentik_groups))

# Log for debugging
ak_logger.info(f"Entra ID user {username} mapped to groups: {authentik_groups}")

return {
    "username": username,
    "email": email,
    "name": full_name,
    "groups": authentik_groups,
    "attributes": {
        "entra_id": info.get("oid", ""),  # Entra ID Object ID
        "upn": info.get("upn", ""),      # User Principal Name
        "tenant_id": info.get("tid", ""), # Tenant ID
        "entra_groups": entra_groups,    # Original Entra ID groups
        "domain": domain,
        "assigned_groups": authentik_groups,
        "onboarding_method": "entra_id_oauth"
    }
} 