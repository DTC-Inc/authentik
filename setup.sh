#!/bin/bash

# Authentik Identity Provider Setup Script
# This script helps you quickly deploy the Authentik Docker stack

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if Docker is installed and running
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker is not running. Please start Docker first."
        exit 1
    fi
    
    # Check if Docker Compose is available
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose v2 is not available. Please install Docker Compose v2."
        exit 1
    fi
    
    # Check if openssl is available for password generation
    if ! command -v openssl &> /dev/null; then
        log_error "OpenSSL is not installed. Please install OpenSSL for secure password generation."
        exit 1
    fi
    
    log_success "All prerequisites are met!"
}

# Generate secure passwords
generate_passwords() {
    log_info "Generating secure passwords..."
    
    AUTHENTIK_SECRET_KEY=$(openssl rand -base64 60 | tr -d '\n')
    AUTHENTIK_DB_PASSWORD=$(openssl rand -base64 32 | tr -d '\n')
    
    log_success "Secure passwords generated!"
}

# Create .env file
create_env_file() {
    log_info "Creating .env file..."
    
    # Get user input for basic configuration
    read -p "Enter your domain name (e.g., yourdomain.com): " DOMAIN_NAME
    read -p "Enter your timezone (e.g., America/New_York): " TIMEZONE
    read -p "Enter container name prefix [homelab]: " CONTAINER_PREFIX
    CONTAINER_PREFIX=${CONTAINER_PREFIX:-homelab}
    
    # Get user ID and group ID
    PUID=$(id -u)
    PGID=$(id -g)
    
    # Create the .env file
    cat > .env << EOF
# Authentik Identity Provider Configuration
# Generated by setup script on $(date)

#########################################
# General Configuration
#########################################
CONTAINER_NAME_PREFIX=${CONTAINER_PREFIX}
TZ=${TIMEZONE}
PUID=${PUID}
PGID=${PGID}

#########################################
# Authentik Application Configuration
#########################################
AUTHENTIK_VERSION=2025.2
AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
AUTHENTIK_ERROR_REPORTING=false
ENABLE_AUTHENTIK_PRIVILEGES=false

#########################################
# Domain Configuration
#########################################
AUTHENTIK_PUBLIC_DOMAIN=auth.${DOMAIN_NAME}
AUTHENTIK_PRIVATE_DOMAIN=auth.local.${DOMAIN_NAME}
AUTHENTIK_CERT_RESOLVER=letsencrypt
# AUTHENTIK_SERVER_IP=192.168.1.100

#########################################
# Database Configuration
#########################################
AUTHENTIK_DB_USERNAME=authentik
AUTHENTIK_DB_PASSWORD=${AUTHENTIK_DB_PASSWORD}
AUTHENTIK_DB_DATABASE_NAME=authentik

#########################################
# Email Configuration (Optional)
#########################################
# Uncomment and configure these for email functionality
# AUTHENTIK_EMAIL_HOST=smtp.gmail.com
# AUTHENTIK_EMAIL_PORT=587
# AUTHENTIK_EMAIL_USERNAME=your-email@gmail.com
# AUTHENTIK_EMAIL_PASSWORD=your-app-password
# AUTHENTIK_EMAIL_USE_TLS=true
# AUTHENTIK_EMAIL_USE_SSL=false
# AUTHENTIK_EMAIL_TIMEOUT=10
# AUTHENTIK_EMAIL_FROM=authentik@${DOMAIN_NAME}

#########################################
# Network Configuration
#########################################
AUTHENTIK_APP_NETWORK=authentik_app
AUTHENTIK_DB_NETWORK=authentik_db
CONTAINERS_INTERNET_NETWORK=containers_internet
ENABLE_HOME_IOT_NETWORK=false
# HOME_IOT_NETWORK=home_iot

#########################################
# Volume Configuration
#########################################
# Leave empty for local volumes
AUTHENTIK_MEDIA_VOLUME_TYPE=
AUTHENTIK_TEMPLATES_VOLUME_TYPE=
AUTHENTIK_CERTS_VOLUME_TYPE=
AUTHENTIK_REDIS_VOLUME_TYPE=
AUTHENTIK_DB_VOLUME_TYPE=
AUTHENTIK_GEOIP_VOLUME_TYPE=

AUTHENTIK_MEDIA_VOLUME_OPTIONS=
AUTHENTIK_TEMPLATES_VOLUME_OPTIONS=
AUTHENTIK_CERTS_VOLUME_OPTIONS=
AUTHENTIK_REDIS_VOLUME_OPTIONS=
AUTHENTIK_DB_VOLUME_OPTIONS=
AUTHENTIK_GEOIP_VOLUME_OPTIONS=

AUTHENTIK_MEDIA_BASE=
AUTHENTIK_TEMPLATES_BASE=
AUTHENTIK_CERTS_BASE=
AUTHENTIK_REDIS_BASE=
AUTHENTIK_DB_BASE=
AUTHENTIK_GEOIP_BASE=

#########################################
# Optional Services
#########################################
ENABLE_GEOIP_UPDATE=1
# GEOIP_ACCOUNT_ID=
# GEOIP_LICENSE_KEY=

ENABLE_AUTHENTIK_CLOUDFLARED=0
# AUTHENTIK_CLOUDFLARE_TUNNEL_TOKEN=
EOF

    log_success ".env file created successfully!"
}

# Setup networks
setup_networks() {
    log_info "Setting up Docker networks..."
    
    # Check if containers_internet network exists, create if not
    if ! docker network inspect containers_internet &> /dev/null; then
        docker network create containers_internet
        log_success "Created containers_internet network"
    else
        log_info "containers_internet network already exists"
    fi
}

# Deploy the stack
deploy_stack() {
    log_info "Deploying Authentik stack..."
    
    # Pull the latest images
    docker compose pull
    
    # Start the services
    docker compose up -d
    
    log_success "Authentik stack deployed successfully!"
}

# Show post-deployment information
show_post_deployment_info() {
    echo
    log_success "üéâ Authentik has been deployed successfully!"
    echo
    log_info "Next steps:"
    echo "1. Wait for all services to be healthy (this may take a few minutes)"
    echo "2. Navigate to: https://auth.${DOMAIN_NAME}/if/flow/initial-setup/"
    echo "3. Set up the admin account (akadmin)"
    echo "4. Configure your applications and authentication flows"
    echo
    log_info "Useful commands:"
    echo "‚Ä¢ Check service status: docker compose ps"
    echo "‚Ä¢ View logs: docker compose logs -f authentik-server"
    echo "‚Ä¢ Stop services: docker compose down"
    echo "‚Ä¢ Update services: docker compose pull && docker compose up -d"
    echo
    log_warning "Important notes:"
    echo "‚Ä¢ The initial setup URL MUST include the trailing slash: /if/flow/initial-setup/"
    echo "‚Ä¢ Configure email settings in .env file for full functionality"
    echo "‚Ä¢ Review the README.md file for advanced configuration options"
    echo "‚Ä¢ Ensure your DNS points to this server for the domain: auth.${DOMAIN_NAME}"
    echo
    log_info "Generated credentials are stored in the .env file"
    log_warning "Keep your .env file secure and never commit it to version control!"
}

# Main execution
main() {
    echo "========================================"
    echo "üîê Authentik Setup Script"
    echo "========================================"
    echo
    
    # Check if .env already exists
    if [[ -f ".env" ]]; then
        log_warning ".env file already exists!"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Exiting without changes."
            exit 0
        fi
    fi
    
    # Run setup steps
    check_prerequisites
    generate_passwords
    create_env_file
    setup_networks
    deploy_stack
    show_post_deployment_info
}

# Run the main function
main "$@" 